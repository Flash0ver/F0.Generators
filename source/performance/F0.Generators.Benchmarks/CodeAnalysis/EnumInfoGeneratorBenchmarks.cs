using System;
using BenchmarkDotNet.Attributes;
using F0.Benchmarks.Measurers;
using F0.CodeAnalysis;

namespace F0.Benchmarks.CodeAnalysis
{
	public class EnumInfoGeneratorBenchmarks
	{
		private readonly CSharpSourceGeneratorMeasurer<EnumInfoGenerator> benchmark = new();

		[GlobalSetup]
		public void Setup()
		{
			string code =
@"#nullable enable
using System;
using F0.Generated;

public sealed class Class
{
	public void Method(StringSplitOptions options, DateTimeKind kind)
	{
		_ = EnumInfo.GetName(options);
		_ = EnumInfo.GetName(StringComparison.CurrentCultureIgnoreCase);

		_ = EnumInfo.GetName(kind);
		_ = EnumInfo.GetName(DayOfWeek.Monday);
	}
}

namespace F0.Generated
{
	public sealed class SourceGenerationException : Exception
	{
		public SourceGenerationException(string message)
			: base(message)
		{
		}
	}
}

namespace System.ComponentModel
{
	public class InvalidEnumArgumentException : ArgumentException
	{
		public InvalidEnumArgumentException(string argumentName, int invalidValue, Type enumClass)
		{
		}
	}
}
";

			benchmark.Initialize(code);
		}

		[Benchmark]
		public object? Generate()
		{
			benchmark.Invoke();
			return null;
		}

		[GlobalCleanup]
		public void Cleanup()
		{
			string generated =
$@"// <auto-generated/>

#nullable enable

namespace F0.Generated
{{
	internal static class EnumInfo
	{{
		public static string GetName(global::System.Enum? value)
		{{
			throw new global::F0.Generated.SourceGenerationException($""Cannot use the unspecialized method, which serves as a placeholder for the generator. Enum-Type {{value?.GetType().ToString() ?? ""<null>""}} must be concrete to generate the allocation-free variant of {nameof(Enum)}.{nameof(Enum.ToString)}()."");
		}}

		public static string GetName(global::System.StringSplitOptions value)
		{{
			throw new global::F0.Generated.SourceGenerationException(""Flags are not yet supported: see https://github.com/Flash0ver/F0.Generators/issues/1"");
		}}

		public static string GetName(global::System.StringComparison value)
		{{
			return value switch
			{{
				global::System.StringComparison.CurrentCulture => nameof(global::System.StringComparison.CurrentCulture),
				global::System.StringComparison.CurrentCultureIgnoreCase => nameof(global::System.StringComparison.CurrentCultureIgnoreCase),
				global::System.StringComparison.InvariantCulture => nameof(global::System.StringComparison.InvariantCulture),
				global::System.StringComparison.InvariantCultureIgnoreCase => nameof(global::System.StringComparison.InvariantCultureIgnoreCase),
				global::System.StringComparison.Ordinal => nameof(global::System.StringComparison.Ordinal),
				global::System.StringComparison.OrdinalIgnoreCase => nameof(global::System.StringComparison.OrdinalIgnoreCase),
				_ => throw new global::System.ComponentModel.InvalidEnumArgumentException(nameof(value), (int)value, typeof(global::System.StringComparison)),
			}};
		}}

		public static string GetName(global::System.DateTimeKind value)
		{{
			return value switch
			{{
				global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
				global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
				global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
				_ => throw new global::System.ComponentModel.InvalidEnumArgumentException(nameof(value), (int)value, typeof(global::System.DateTimeKind)),
			}};
		}}

		public static string GetName(global::System.DayOfWeek value)
		{{
			return value switch
			{{
				global::System.DayOfWeek.Sunday => nameof(global::System.DayOfWeek.Sunday),
				global::System.DayOfWeek.Monday => nameof(global::System.DayOfWeek.Monday),
				global::System.DayOfWeek.Tuesday => nameof(global::System.DayOfWeek.Tuesday),
				global::System.DayOfWeek.Wednesday => nameof(global::System.DayOfWeek.Wednesday),
				global::System.DayOfWeek.Thursday => nameof(global::System.DayOfWeek.Thursday),
				global::System.DayOfWeek.Friday => nameof(global::System.DayOfWeek.Friday),
				global::System.DayOfWeek.Saturday => nameof(global::System.DayOfWeek.Saturday),
				_ => throw new global::System.ComponentModel.InvalidEnumArgumentException(nameof(value), (int)value, typeof(global::System.DayOfWeek)),
			}};
		}}
	}}
}}
";
			benchmark.Inspect(generated);
		}
	}
}
