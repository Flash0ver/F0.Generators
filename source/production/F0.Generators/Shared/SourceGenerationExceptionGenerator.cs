using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using F0.CodeDom.Compiler;
using F0.Extensions;
using F0.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace F0.Shared
{
	[Generator]
	internal sealed class SourceGenerationExceptionGenerator : ISourceGenerator
	{
		private const string TypeName = "SourceGenerationException";
		private const string HintName = "SourceGenerationException.g.cs";

		public void Initialize(GeneratorInitializationContext context)
		{ }

		public void Execute(GeneratorExecutionContext context)
		{
			Debug.Assert(context.SyntaxReceiver is null);

			if (context.ParseOptions.IsCSharp())
			{
				string source = GenerateSourceCode(context.ParseOptions);

				SourceText sourceText = SourceText.From(source, Encodings.Utf8NoBom);
				context.AddSource(HintName, sourceText);
			}
		}

		private static string GenerateSourceCode(ParseOptions parseOptions)
		{
			using StringWriter writer = new(CultureInfo.InvariantCulture);
			using IndentedTextWriter source = new(writer, Trivia.Tab);

			LanguageVersion languageVersion = parseOptions.GetCSharpLanguageVersion();
			LanguageFeatures languageFeatures = new(languageVersion);

			source.WriteLine("// <auto-generated/>");
			source.WriteLine();

			if (languageFeatures.HasNullableReferenceTypes)
			{
				source.WriteLine("#nullable enable");
				source.WriteLine();
			}

			source.WriteLine("namespace F0.Generated");
			source.WriteLine(Tokens.OpenBrace);
			source.Indent++;

			if (languageFeatures.HasNamespaceAliasQualifier)
			{
				source.WriteLine($"internal sealed class {TypeName} : global::System.Exception");
			}
			else
			{
				source.WriteLine($"internal sealed class {TypeName} : System.Exception");
			}
			source.WriteLine(Tokens.OpenBrace);
			source.Indent++;

			source.WriteLine($@"private const string helpLink = ""{Uris.Repository}"";");

			source.WriteLineNoTabs();

			source.WriteLine($"public {TypeName}()");
			source.WriteLineIndented(": base(CreateNotGeneratedMessage())");
			source.WriteLine(Tokens.OpenBrace);
			source.Indent++;
			source.WriteLine("HelpLink = helpLink;");
			source.Indent--;
			source.WriteLine(Tokens.CloseBrace);

			source.WriteLineNoTabs();

			source.WriteLine($"public {TypeName}(string message)");
			source.WriteLineIndented(": base(message)");
			source.WriteLine(Tokens.OpenBrace);
			source.Indent++;
			source.WriteLine("HelpLink = helpLink;");
			source.Indent--;
			source.WriteLine(Tokens.CloseBrace);

			source.WriteLineNoTabs();

			if (languageFeatures.HasNamespaceAliasQualifier)
			{
				source.WriteLine($"public {TypeName}(string message, global::System.Exception innerException)");
			}
			else
			{
				source.WriteLine($"public {TypeName}(string message, System.Exception innerException)");
			}
			source.WriteLineIndented(": base(message, innerException)");
			source.WriteLine(Tokens.OpenBrace);
			source.Indent++;
			source.WriteLine("HelpLink = helpLink;");
			source.Indent--;
			source.WriteLine(Tokens.CloseBrace);

			source.WriteLineNoTabs();

			source.WriteLine("private static string CreateNotGeneratedMessage()");
			source.WriteLine(Tokens.OpenBrace);
			source.Indent++;
			source.WriteLine($@"const string uri = ""{Uris.Issues}"";");
			source.WriteLineNoTabs();
			source.WriteLine(@"return ""The method or operation was not generated correctly.""");
			source.Indent++;
			source.WriteLine(@"+ "" Please leave a comment on a related issue, or create a new issue at """);
			source.WriteLine(@"+ ""'"" + uri + ""'""");
			source.WriteLine(@"+ "". Thank you!"";");
			source.Indent--;
			source.Indent--;
			source.WriteLine(Tokens.CloseBrace);

			source.Indent--;
			source.WriteLine(Tokens.CloseBrace);

			source.Indent--;
			source.WriteLine(Tokens.CloseBrace);

			return writer.ToString();
		}

		private sealed class LanguageFeatures
		{
			private readonly LanguageVersion languageVersion;

			public LanguageFeatures(LanguageVersion version)
				=> languageVersion = version;

			public bool HasNamespaceAliasQualifier => languageVersion >= LanguageVersion.CSharp2;
			public bool HasNullableReferenceTypes => languageVersion >= LanguageVersion.CSharp8;
		}
	}
}
